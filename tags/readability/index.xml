<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Readability on Whipperstacker</title>
    <link>http://whipperstacker.com/tags/readability/</link>
    <description>Recent content in Readability on Whipperstacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Oct 2015 12:13:34 -0700</lastBuildDate>
    <atom:link href="http://whipperstacker.com/tags/readability/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Codejunk and Readability: Using `gofmt` to Remove Extraneous Parentheses</title>
      <link>http://whipperstacker.com/2015/10/26/codejunk-and-readability-using-gofmt-to-remove-extraneous-parentheses</link>
      <pubDate>Mon, 26 Oct 2015 12:13:34 -0700</pubDate>
      
      <guid>http://whipperstacker.com/2015/10/26/codejunk-and-readability-using-gofmt-to-remove-extraneous-parentheses</guid>
      <description>&lt;p&gt;You start out with just the right number of parentheses: the bare minimum. Well, as few as you can get away with, without having to worry about remembering operator precedence. (&lt;em&gt;Does &lt;code&gt;||&lt;/code&gt; bind more tightly than &lt;code&gt;&amp;amp;&amp;amp;[&lt;/code&gt;1]?&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Then edge cases happen. You wrestle with logic, try out variations, and parentheses accrete.&lt;/p&gt;

&lt;p&gt;Bugfix 1, simplicity 0.&lt;/p&gt;

&lt;p&gt;This leaves you trying to spot the actual logical expressions amidst all the spurious parentheses.&lt;/p&gt;

&lt;p&gt;Noise, in other words. Codejunk[2]. Superfluous visual elements that get in the way of comprehension.&lt;/p&gt;

&lt;p&gt;You might think that &lt;code&gt;gofmt&lt;/code&gt; will take care of it automatically, but if &lt;code&gt;gofmt&lt;/code&gt; removed all the unnecessary parentheses, then readability would take a hit. We&amp;rsquo;d all be back to remembering operator precedence[3].&lt;/p&gt;

&lt;p&gt;Even though &lt;code&gt;gofmt&lt;/code&gt; won&amp;rsquo;t do this automatically, the command has a flag that will let you ask it to remove extraneous parentheses: &lt;code&gt;-r&lt;/code&gt;, for &lt;em&gt;rewrite&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Take this bit of code, observed in the wild:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func IsLeapYear(y int) bool {
    return ((y%4) == 0 &amp;amp;&amp;amp; (!((y%100) == 0 &amp;amp;&amp;amp; (y%400) != 0)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the command that will ask &lt;code&gt;gofmt&lt;/code&gt; to show a diff with the extra parentheses removed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gofmt -d -r &#39;(a) -&amp;gt; a&#39; .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this against the above code provides the following diff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; func IsLeapYear(y int) bool {
-   return ((y%4) == 0 &amp;amp;&amp;amp; (!((y%100) == 0 &amp;amp;&amp;amp; (y%400) != 0)))
+   return y%4 == 0 &amp;amp;&amp;amp; !(y%100 == 0 &amp;amp;&amp;amp; y%400 != 0)
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is significantly easier to read. In fact, now that the logical expression is readable, it&amp;rsquo;s possible to see that the entire thing can be further simplified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;y%4 == 0 &amp;amp;&amp;amp; y%100 != 0 || y%400 == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out &lt;a href=&#34;http://`gofmt`&#34; target=&#34;_blank&#34;&gt;the gofmt documentation for details about the rewrite flag.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1) No.
2) A play on Edward Tufte&amp;rsquo;s &lt;em&gt;Chartjunk&lt;/em&gt;. I first heard the term codejunk from Carl Manaster in 2009.
3) To be fair, that&amp;rsquo;s actually &lt;a href=&#34;https://golang.org/ref/spec#Operator_precedence&#34;&gt;not difficult in Go&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>